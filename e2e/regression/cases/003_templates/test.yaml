init:
  parentIndex: ${parent.index}

pipeline:
  run:
    when: $runStandAlone
    prepare:
      db1:
        register:
          action: dsunit:register
          datastore: db1
          config:
            driverName: mysql
            descriptor: '[username]:[password]@tcp(${dbIP.mysql}:3306)/[dbname]?parseTime=true'
            credentials: $mysqlCredentials
        populate:
          action: dsunit:prepare
          datastore: db1
          URL:  ${parent.path}/db1/prepare


    cleanUp:
      action: storage:remove
      sleepTimeMs: 1000
      assets:
        - URL: '${local.ruleURL}/case_${parentIndex}'
        - URL: '${local.templateURL}/case_${parentIndex}'

    setupRule:
      action: storage:copy
      expand: true
      source:
        URL: ${parent.path}/rule/
      dest:
        URL: ${local.ruleURL}/case_${parentIndex}

    setupTemplate:
      action: storage:copy
      expand: true
      source:
        URL: ${parent.path}/tmpl/
      dest:
        URL: ${local.templateURL}/case_${parentIndex}

    test:
      readEvents:
        action: 'rest/runner:send'
        Method: GET
        URL: ${local.endpoint}/case_${parentIndex}/events
        expect:
          Status: ok
          '@assertPath@Data.events[0].id': 1
          '@assertPath@Data.events[10].type.id': 5
          '@length@Data.events': 11

      readEvent:
        action: 'rest/runner:send'
        Method: GET
        URL: ${local.endpoint}/case_${parentIndex}/events/2
        expect:
          Status: ok
          '@assertPath@Data.events[0].id': 2
          '@assertPath@Data.events[0].type.id': 2
          '@length@Data.events': 1

      readEventType:
        action: 'rest/runner:send'
        Method: GET
        URL: ${local.endpoint}/case_${parentIndex}/events/2/type
        expect:
          Status: ok
          '@assertPath@Data.event_types[0].id': 2
          '@length@Data.event_types': 1

  #  info:
  #    action: print
  #    message: $AsJSON(${readEventType})
